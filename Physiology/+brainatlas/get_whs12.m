function [V, h, cv, labels] = get_whs12


% The T1 ('spin lattice relaxation') data was acquired with an RF refocused spin echo sequence, using TR=50 ms and a TE=5.1 ms.
nii_file = '/datadisk/BrainAtlas/ATLASES/whs12/canon_T1_r_downsample2.nii';
% The T2 ('spin spin relaxation') data was acquired with a Carr-Purcell-Meiboom-Gill (CPMG) multi-echo sequence, with TR=300 ms and TE ranging from 7.5 to 60 ms.
nii_file = '/datadisk/BrainAtlas/ATLASES/whs12/CT2starWarped2T1_downsample2.nii';
% The T2* ('magnetic susceptibility') data was acquired with a 45° gradient echo sequence, using TR=50 ms and TE=4.3 ms. An affine transform is applied to the raw T2 and T2* scans to best align with the T1 (CIVM datasets CT2Warped2T1.nii and CT2starWarped2T1.nii).
nii_file = '/datadisk/BrainAtlas/ATLASES/whs12/CT2Warped2T1_downsample2.nii';
V.phy = io.read.nii(nii_file);
% the labels file
nii_file = '/datadisk/BrainAtlas/ATLASES/whs12/WHS_0_6_1_Labels_downsample2.nii';
[V.lab, H] = io.read.nii(nii_file);

label_file = '/datadisk/BrainAtlas/ATLASES/whs12/acr2full.json';

x3d_file = '/datadisk/BrainAtlas/ATLASES/whs12/wholebrain.x3d';

%https://scalablebrainatlas.incf.org/mouse/WHS12
res = H.PixelDimensions(1)/1e3;
assert(all( H.PixelDimensions(1:3) - H.PixelDimensions(1)< eps))


V.lab = flip( permute(V.lab, [3, 1, 2]), 1);
V.phy = flip( permute(V.phy, [3, 1, 2, 4]), 1);

% excludes from the label volume
labels = io.read.json(label_file);
labels = [ struct2cell(labels)  fields(labels)];
labels  = labels(2:end,:);
labs_exclude = {'optic tract', 'nucleus accumbens', 'trigeminal', 'trigeminal tract', 'optic nerve'};
[~, il] = intersect(labels(:,1), labs_exclude);
V.lab(ismember(V.lab, il)) = 0;

% origin of the coordinate system (convert mm to m)
xyz0 = [H.QoffsetX, H.QoffsetY, H.QoffsetZ]./1e3;
cv = CartesianVolume(V.lab, res, xyz0);




% cv.x0 = cv.lx - H.QoffsetX./1e3;
% cv.y0 = cv.ly - H.QoffsetX./1e3;
% cv.z0 = cv.l - H.QoffsetX./1e3;

% % close all
% fv = isosurface(permute(W~=0,[3, 2, 1]),0.5);
% % in this case the volume is out in pixel unit, convert to SI
% fv.vertices = fv.vertices.*res;
% fv.faces= fv.faces;
% h.fig = figure('Color','w'); h.p = patch(fv); h.ax = gca;
% set(h.ax, 'DataAspectRatio',[1 1 1], 'zdir', 'reverse')
% xlabel(h.ax, 'x'), ylabel(h.ax, 'y'), zlabel(h.ax, 'z')
% h.p.FaceColor = 'red';
% h.p.EdgeColor = 'none';
% h.p.FaceAlpha = 0.7;
% view(69,42);
% camlight;
% 
% return





% figure, imagesc(squeeze(W(:,:,round(size(W,3)/3*2))))
% set(gca,'DataAspectRatio',[1 1 1]);
% 
% figure, imagesc(squeeze(W(:,:,round(size(W,3)/2))))
% set(gca,'DataAspectRatio',[1 1 1]);
% 
% figure, imagesc(squeeze(W(:,round(size(W,2)/2),:)))
% set(gca,'DataAspectRatio',[1 1 1]);
% figure, imagesc(squeeze(W(round(size(W,1)/2),:,:)))
% set(gca,'DataAspectRatio',[1 1 1]);


% [V, F] = io.read.x3d(x3d_file);
% 
% h.fig = figure('Color','w'); h.p = patch('Faces', F(:,1:3)+1, 'Vertices', V); h.ax = gca;
% set(h.ax, 'DataAspectRatio',[1 1 1], 'zdir', 'normal')
% xlabel(h.ax, 'x'), ylabel(h.ax, 'y'), zlabel(h.ax, 'z')
% h.p.FaceColor = 'red';
% h.p.EdgeColor = 'none';
% h.p.FaceAlpha = 0.7;
% view(69,42);
% camlight;
% 

% get the code to do a 3D viewer directly
% https://scalablebrainatlas.incf.org/services/view3d_l2v.php?template=WHS12
% origin of the Atlas:
% https://scalablebrainatlas.incf.org/plugins/WHS_landmarks/WHS_origin_2011.png
% nb il faudra faire attention à bien citer le papier responsable de
% l'atlas dans nos publications


%%
%
% Copy this code into Matlab R2014b or up,
% and see the 3d atlas in a Matlab Figure.
% 
% Script generated by the Scalable Brain Atlas (SBA):
% https://scalablebrainatlas.incf.org/services/view3d_l2v.php, with parameters:
% {
%     "template": "WHS12",
%     "space": "WHS12",
%     "mesh": "wholebrain",
%     "deform": "fiducial",
%     "l2v": "",
%     "clim": "[null,null]",
%     "bg": "[0,0,0]",
%     "width": "800",
%     "height": "800",
%     "cam": "L",
%     "overlay": "labels",
%     "format": "mfile"
% }
%
% Template data is not 'owned' by SBA, read more about licensing 
% and our citation policy at:
% https://scalablebrainatlas.incf.org/main/citationpolicy.php
%
whs12_mat_file = '/datadisk/BrainAtlas/ATLASES/whs12/3d_patch.mat';

% download the files but cache them locally to allow offline processing
if ~exist(whs12_mat_file, 'file')
    options = weboptions('ContentReader', @importdata);
    vertices = webread('https://scalablebrainatlas.incf.org//templates/WHS12/meshes/wholebrain_vertices.csv',options);
    
    faces = webread('https://scalablebrainatlas.incf.org//templates/WHS12/meshes/wholebrain_faces.csv',options);
    faces = round(faces) + 1; % Matlab design flaw: arrays have offset one
    
    vtx2id = webread('https://scalablebrainatlas.incf.org//templates/WHS12/meshdata/wholebrain_labels.csv',options);
    vtx2id = round(vtx2id) + 1; % Matlab design flaw: arrays have offset one
    
    id2rgb_1 = webread('https://scalablebrainatlas.incf.org//templates/WHS12/meshdata/wholebrain_colormap.csv',options);

    rgb2acr = webread('https://scalablebrainatlas.incf.org//templates/WHS12/template/rgb2acr.json');
    
    save(whs12_mat_file, 'faces', 'vertices', 'vtx2id', 'id2rgb_1', 'rgb2acr');
else
    load(whs12_mat_file, 'faces', 'vertices', 'vtx2id', 'id2rgb_1', 'rgb2acr' );
end
id2rgb_H = reshape(sprintf('%02X',round(id2rgb_1*255).'),6,[]).'; % convert to hex

vertices = vertices/1000; % data is in mm so convert back to SI
vertices(:,3) = - vertices(:,3);


% remove unused colors
numColors = size(id2rgb_1,1);
id2used = zeros(1,numColors);
id2used(vtx2id) = 1;
usedColors = find(id2used);
id2used(usedColors) = 1:numel(usedColors);
vtx2id = id2used(vtx2id)';

% map color index to brain region acronym
id2acr = {};
for i=usedColors
  rgb_H = id2rgb_H(i,:);
  try
    acr = getfield(rgb2acr,rgb_H);
  catch
    acr = getfield(rgb2acr,['x' rgb_H]); % Matlab design flaw: struct fields cannot start with number
  end
  id2acr{i} = acr;
end

h.fig_volume = figure('Color','w'); h.ax = axes(h.fig_volume);
h.p = patch('Vertices',vertices,'Faces',faces,'FaceVertexCData',vtx2id,...
          'FaceColor','flat','FaceLighting','phong','EdgeColor','none',...
          'CDataMapping','scaled','Parent',h.ax,'FaceAlpha',0.8);

set(h.fig_volume,'renderer','zbuffer');
lighting('flat');
material('metal');

set(h.ax, 'DataAspectRatio',[1 1 1], 'zdir', 'reverse')
xlabel(h.ax, 'x'), ylabel(h.ax, 'y'), zlabel(h.ax, 'z')

camlight(-40,40);
camlight(-40,40);

colormap(id2rgb_1(usedColors,:));
hBar=colorbar;
nColors = numel(usedColors);
set(hBar,'ytick',1.5:(nColors-1)/nColors:nColors+0.5);
set(hBar,'yticklabel',id2acr(usedColors));

view(69,42);

